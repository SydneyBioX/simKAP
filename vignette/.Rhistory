}
if (num_kidney_state != 0 &
state_algorithm &
!is.null(state_algorithm_FUN)) {
# Run state algorithm
donor_state <- as.character(sim_donor_matrix$donor_state)[d]
#
if (verbose) {
cat("run state algorithm:", donor_state, "\n")
cat("Blood group:",
sim_donor_matrix$donor_blgroup[d], "\n")
}
# Reselect the eligible recipient
eligible_recip_matrix_state <- do.call(state_eligible_FUN,
args = append(list(recip_matrix = update_recip_matrix,
donor_matrix = sim_donor_matrix,
whichdonor = d),
state_eligible_arg))
# print(nrow(eligible_recip_matrix))
if (nrow(eligible_recip_matrix_state) > 0) {
HLA_matrix_state <- HLAmatchCalMat(eligible_recip_matrix_state,
sim_donor_matrix[d, ])
rownames(HLA_matrix_state) <- eligible_recip_matrix_state$recip_id
state_recip_score <- state_algorithm_FUN(recip_matrix = eligible_recip_matrix_state,
donor_matrix = sim_donor_matrix[d, ],
HLA = HLA_matrix_state)
names(state_recip_score) <- eligible_recip_matrix_state$recip_id
# Select matched recipient
select_state_idx <- do.call(state_matching_FUN,
args = append(list(recip_matrix = eligible_recip_matrix_state,
donor_matrix = sim_donor_matrix[d, ],
allocation_score = state_recip_score,
HLA = HLA_matrix_state,
graft_number = num_kidney_state),
state_matching_arg))
#print(select_state_idx)
allo_alg <- "State"
if (!is.null(select_state_idx) & length(select_state_idx) >= 1) {
simVector <- cbind(eligible_recip_matrix_state[eligible_recip_matrix_state$recip_id %in%
select_state_idx, ],
sim_donor_matrix[d, ],
score = state_recip_score[select_state_idx],
HLA_matrix_state[select_state_idx, ],
algorithm = allo_alg,
recip_waittime_new=sim_donor_matrix[d,"tx_date"]-
eligible_recip_matrix_state[eligible_recip_matrix_state$recip_id %in%select_state_idx,"recip_rrtstartdate"])
SimResults  <- rbind(SimResults, simVector)
update_recip_matrix <- update_recip_matrix[!update_recip_matrix$recip_id %in%
simVector$recip_id,]
}
}
}
select_idx <- c(select_national_idx,
select_state_idx)
# print(c("nat/state", select_idx))
} else {
# If there is no eligible pool in national, disregard the donor
select_idx <- NULL
}
select_national_idx2 <- NULL
if(National_II){
if (length(select_idx) < num_kidney) {
#print("rerun national algorithm...")
num_kidney_remain <- num_kidney - length(select_idx)
# reselect the pool with bloodGroup_strict_match = FALSE
eligible_recip_matrix <- do.call(eligible_FUN,
args = append(list(recip_matrix = update_recip_matrix,
donor_matrix = sim_donor_matrix,
whichdonor = d,
bloodGroup_strict_match = FALSE),
eligible_arg))
if (nrow(eligible_recip_matrix) > 0) {
# Calculate HLA
HLA_matrix <- HLAmatchCalMat(eligible_recip_matrix,
sim_donor_matrix[d, ])
rownames(HLA_matrix) <- eligible_recip_matrix$recip_id
# Calculate Socre
recip_score <- algorithm_FUN(recip_matrix = eligible_recip_matrix,
donor_matrix = sim_donor_matrix[d, ],
HLA = HLA_matrix)
names(recip_score) <- eligible_recip_matrix$recip_id
max_recip_score <- sort(recip_score,
decreasing = TRUE)[seq_len(num_kidney_remain)]
index_national <- na.omit(recip_score) >= national_algorithm_threshold
national_scores <- recip_score[index_national]
eligible_recip_matrix_national <-
eligible_recip_matrix[which(eligible_recip_matrix$recip_id %in% names(national_scores)),]
select_national_idx2 <- do.call(matching_FUN,
args = append(list(recip_matrix = eligible_recip_matrix_national,
donor_matrix = sim_donor_matrix[d, ],
allocation_score = national_scores,
HLA = HLA_matrix,
graft_number = num_kidney_remain),
matching_arg))
#print(c("nat2", select_national_idx2))
allo_alg <- "National_round2"
if (!is.null(select_national_idx2) & length(select_national_idx2) >= 1) {
simVector <- cbind(eligible_recip_matrix[eligible_recip_matrix$recip_id %in%
select_national_idx2, ],
sim_donor_matrix[d, ],
score = recip_score[select_national_idx2],
HLA_matrix[select_national_idx2, ],
algorithm = allo_alg,
recip_waittime_new=sim_donor_matrix[d,"tx_date"]-
eligible_recip_matrix[eligible_recip_matrix$recip_id %in%select_national_idx2,"recip_rrtstartdate"])
SimResults  <- rbind(SimResults, simVector)
update_recip_matrix <- update_recip_matrix[!update_recip_matrix$recip_id %in%
simVector$recip_id,]
}
}
}
}
if (is.null(select_national_idx2) & is.null(select_idx) |
num_kidney > length(select_national_idx2) + length(select_idx)) {
#print("kidney got discarded :( ")
discard_vector=sim_donor_matrix[d, ]
discard_kidney=rbind(discard_kidney,discard_vector)
}
# cat("Number of kidney assigned:",
#     length(select_idx),
#     "/",
#     num_kidney,
#     "\n"
# )
current_nrow <- nrow(SimResults)
# if(DEBUG) print(simVector)
}## end d
}## end r
}
#####################################
if(state_balance & state_algorithm & dynamic_waitlist){
return(list(SimResults,discard_kidney, statebalance_kidney, dynamics_matrix))}
if(state_balance & state_algorithm & !(dynamic_waitlist)){
return(list(SimResults,discard_kidney, statebalance_kidney))}
if(!(state_balance & state_algorithm) & dynamic_waitlist){
return(list(SimResults,discard_kidney, dynamics_matrix))}
######################################
return(list(SimResults,discard_kidney))
}
for(i in 1:10){simresult[[i]]=fun(recip_sample_list[[i]])}
for(i in 1:10){simresult1[[i]]=fun1(recip_sample_list[[i]])}
fun1=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool2.2,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.2),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
for(i in 1:10){simresult1[[i]]=fun1(recip_sample_list[[i]])}
fun1=function(recip_dt){
return(runSimulation5.4(recip_dt,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool2.2,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.2),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
for(i in 1:10){simresult1[[i]]=fun1(recip_sample_list[[i]])}
raw_donor_matrix$donor_rank = rank(raw_donor_matrix[,'donor_kdri']) / nrow(raw_donor_matrix)
fun1=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool2.2,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.2),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
fun2=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool2.2,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.5),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
fun3=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool1.1,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.2),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
fun4=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool1.1,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.5),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
for(i in 1:10){simresult1[[i]]=fun1(recip_sample_list[[i]])}
for(i in 1:10){simresult2[[i]]=fun2(recip_sample_list[[i]])}
for(i in 1:10){simresult3[[i]]=fun3(recip_sample_list[[i]])}
for(i in 1:10){simresult4[[i]]=fun4(recip_sample_list[[i]])}
saveRDS(simresult,"nationalfull.rds")
saveRDS(simresult1,"us0.2full.rds")
saveRDS(simresult2,"us0.5full.rds")
saveRDS(simresult3,"au0.2full.rds")
saveRDS(simresult4,"au0.5full.rds")
simresult1=readRDS("us0.2full.rds")
simresult2=readRDS("us0.5full.rds")
simresult4=readRDS("au0.2full.rds")
simresult5=readRDS("au0.5full.rds")
simresult=readRDS("nationalfull.rds")
sim <- do.call("rbind", list(simresult[[1]][[1]], simresult[[2]][[1]], simresult[[3]][[1]],simresult[[4]][[1]],simresult[[5]][[1]],simresult[[6]][[1]],simresult[[7]][[1]],simresult[[8]][[1]],simresult[[9]][[1]],simresult[[10]][[1]]))
sim1 <- do.call("rbind", list(simresult1[[1]][[1]], simresult1[[2]][[1]], simresult1[[3]][[1]],simresult1[[4]][[1]],simresult1[[5]][[1]],simresult1[[6]][[1]],simresult1[[7]][[1]],simresult1[[8]][[1]],simresult1[[9]][[1]],simresult1[[10]][[1]]))
sim2 <-do.call("rbind", list(simresult2[[1]][[1]], simresult2[[2]][[1]], simresult2[[3]][[1]],simresult2[[4]][[1]],simresult2[[5]][[1]],simresult2[[6]][[1]],simresult2[[7]][[1]],simresult2[[8]][[1]],simresult2[[9]][[1]],simresult2[[10]][[1]]))
sim4 <- do.call("rbind", list(simresult4[[1]][[1]], simresult4[[2]][[1]], simresult4[[3]][[1]],simresult4[[4]][[1]],simresult4[[5]][[1]],simresult4[[6]][[1]],simresult4[[7]][[1]],simresult4[[8]][[1]],simresult4[[9]][[1]],simresult4[[10]][[1]]))
sim5 <- do.call("rbind", list(simresult5[[1]][[1]], simresult5[[2]][[1]], simresult5[[3]][[1]],simresult5[[4]][[1]],simresult5[[5]][[1]],simresult5[[6]][[1]],simresult5[[7]][[1]],simresult5[[8]][[1]],simresult5[[9]][[1]],simresult5[[10]][[1]]))
sim_national=sim
sim_us0.2=sim1
sim_us0.5=sim2
sim_au0.2=sim4
sim_au0.5=sim5
linMap <- function(x, from, to) {
(x - min(stats::na.omit(x))) / max(stats::na.omit(x) - min(stats::na.omit(x))) * (to - from) + from
}
ranking <- function(x){
x = (rank(x) / length(x))*100
return(x)}
national=simresult[[1]][[1]]
us0.2=simresult1[[1]][[1]]
us0.5=simresult2[[1]][[1]]
au0.2=simresult4[[1]][[1]]
au0.5=simresult5[[1]][[1]]
par(mfrow=c(2,3))
national$donor_kdri_new=ranking(national$donor_kdri)
national$recip_epts_new=ranking(national$recip_epts)
plot(national$donor_kdri_new,national$recip_epts_new)
au0.2$donor_kdri_new=ranking(au0.2$donor_kdri)
au0.2$recip_epts_new=ranking(au0.2$recip_epts)
plot(au0.2$donor_kdri_new,au0.2$recip_epts_new)
au0.5$donor_kdri_new=ranking(au0.5$donor_kdri)
au0.5$recip_epts_new=ranking(au0.5$recip_epts)
plot(au0.5$donor_kdri_new,au0.5$recip_epts_new)
us0.2$donor_kdri_new=ranking(us0.2$donor_kdri)
us0.2$recip_epts_new=ranking(us0.2$recip_epts)
plot(us0.2$donor_kdri_new,us0.2$recip_epts_new)
us0.5$donor_kdri_new=ranking(us0.5$donor_kdri)
us0.5$recip_epts_new=ranking(us0.5$recip_epts)
plot(us0.5$donor_kdri_new,us0.5$recip_epts_new)
#try the national comparison only
sim_national=sim_national[sim_national$algorithm=="National",]
sim_au0.2=sim_au0.2[sim_au0.2$algorithm=="National",]
sim_au0.5=sim_au0.5[sim_au0.5$algorithm=="National",]
sim_us0.2=sim_us0.2[sim_us0.2$algorithm=="National",]
sim_us0.5=sim_us0.5[sim_us0.5$algorithm=="National",]
sim_national$name=rep("sim_national",nrow(sim_national))
sim_au0.2$name=rep("sim_au0.2",nrow(sim_au0.2))
sim_us0.2$name=rep("sim_us0.2",nrow(sim_us0.2))
sim_au0.5$name=rep("sim_au0.5",nrow(sim_au0.5))
sim_us0.5$name=rep("sim_us0.5",nrow(sim_us0.5))
sim_national$recip_age_new=as.numeric(round((sim_national$tx_date-sim_national$recip_birthdate)/365,digits = 0))
sim_au0.2$recip_age_new=as.numeric(round((sim_au0.2$tx_date-sim_au0.2$recip_birthdate)/365,digits = 0))
sim_us0.2$recip_age_new=as.numeric(round((sim_us0.2$tx_date-sim_us0.2$recip_birthdate)/365,digits = 0))
sim_au0.5$recip_age_new=as.numeric(round((sim_au0.5$tx_date-sim_au0.5$recip_birthdate)/365,digits = 0))
sim_us0.5$recip_age_new=as.numeric(round((sim_us0.5$tx_date-sim_us0.5$recip_birthdate)/365,digits = 0))
agefun=function(x){
result=as.factor(ifelse(x<=18,"<18",ifelse(x>18&x<=30,"18-30",ifelse(x>30&x<=45,"30-45",ifelse(x>45&x<=55,"45-55",ifelse(x>55&x<=65,"55-65",">65"))))))
levels(result)=c("<18","18-30","30-45","45-55","55-65",">65")
return(result)}
sim_national$recip_ageg=agefun(sim_national$recip_age_new)
sim_au0.2$recip_ageg=agefun(sim_au0.2$recip_age_new)
sim_us0.2$recip_ageg=agefun(sim_us0.2$recip_age_new)
sim_au0.5$recip_ageg=agefun(sim_au0.5$recip_age_new)
sim_us0.5$recip_ageg=agefun(sim_us0.5$recip_age_new)
sim_nationaln=sim_national[,c("recip_waittime_new","recip_ageg","name")]
sim_au0.2n=sim_au0.2[,c("recip_waittime_new","recip_ageg","name")]
sim_us0.2n=sim_us0.2[,c("recip_waittime_new","recip_ageg","name")]
sim_au0.5n=sim_au0.5[,c("recip_waittime_new","recip_ageg","name")]
sim_us0.5n=sim_us0.5[,c("recip_waittime_new","recip_ageg","name")]
dt=list(sim_nationaln,sim_au0.2n,sim_us0.2n,sim_au0.5n,sim_us0.5n)
dt=melt(dt,id.vars = c("name","recip_ageg"))
dt$name=factor(dt$name,levels = c("sim_national","sim_us0.2","sim_us0.5","sim_au0.2","sim_au0.5"))
wt_bld <- ggplot(dt, aes(x=name, y = value)) +  geom_boxplot(aes(fill=name)) + facet_grid(. ~ recip_ageg) +
scale_fill_tableau()  + theme_bw() + labs(fill="Selection algorithm") + xlab ( "Selection algorithm") + ylab("Recipient Waiting Time (Year)")   + ggtitle("Stratified by age")
wt_bld #saved as pdf
eptsfun=function(x){
x = (rank(x) / length(x))*100
x=as.factor(ifelse(x<10,"<10",ifelse(x>=10& x<20,"10-20",ifelse(x>=20& x<30,"20-30",ifelse(x>=30& x<40,"30-40",ifelse(x>=40& x<50,"40-50",">50"))))))
levels(x)=c("<10","10-20","20-30","30-40","40-50",">50")
return(x)}
sim_national$recip_epts_group=eptsfun(sim_national$recip_epts)
sim_au0.2$recip_epts_group=eptsfun(sim_au0.2$recip_epts)
sim_us0.2$recip_epts_group=eptsfun(sim_us0.2$recip_epts)
sim_au0.5$recip_epts_group=eptsfun(sim_au0.5$recip_epts)
sim_us0.5$recip_epts_group=eptsfun(sim_us0.5$recip_epts)
sim_nationaln=sim_national[,c("recip_waittime_new","recip_epts_group","name")]
sim_au0.2n=sim_au0.2[,c("recip_waittime_new","recip_epts_group","name")]
sim_us0.2n=sim_us0.2[,c("recip_waittime_new","recip_epts_group","name")]
sim_au0.5n=sim_au0.5[,c("recip_waittime_new","recip_epts_group","name")]
sim_us0.5n=sim_us0.5[,c("recip_waittime_new","recip_epts_group","name")]
dt=list(sim_nationaln,sim_au0.2n,sim_us0.2n,sim_au0.5n,sim_us0.5n)
dt=melt(dt,id.vars = c("name","recip_epts_group"))
dt$name=factor(dt$name,levels = c("sim_national","sim_us0.2","sim_us0.5","sim_au0.2","sim_au0.5"))
wt_pra <- ggplot(dt, aes(x=name, y = value)) +  geom_boxplot(aes(fill=name)) + facet_grid(. ~ recip_epts_group) +
scale_fill_tableau() + theme_bw() + labs(fill="Selection algorithm") + xlab ( "Selection algorithm") + ylab("Recipient Waiting Time (Year)")  + ggtitle("Stratified by epts")
wt_pra #saved as pdf
# #the changed one
# wt_pra <- ggplot(dt, aes(x=recip_epts_group, y = value)) +  geom_boxplot(aes(fill=recip_ageg)) + facet_grid(. ~ name) +
#  scale_fill_tableau() + theme_bw() + labs(fill="Age group") + xlab ( "Selection algorithm") + ylab("Recipient Listing Time (Year)")  + ggtitle("Stratified by epts")
# wt_pra #saved as pdf
d2<- rbind(cbind(t(t(summary(as.factor(sim_national$algorithm))))/nrow(sim_national), type = "sim_national"),
cbind(t(t(summary(as.factor(sim_us0.2$recip_algorithm))))/nrow(sim_us0.2),type= "sim_us0.2"),cbind(t(t(summary(as.factor(sim_us0.5$recip_algorithm))))/nrow(sim_us0.5),type= "sim_us0.5"),cbind(t(t(summary(as.factor(sim_au0.2$recip_algorithm))))/nrow(sim_au0.2),type= "sim_au0.2"),cbind(t(t(summary(as.factor(sim_au0.5$recip_algorithm))))/nrow(sim_au0.5),type= "sim_au0.5"))
d2 = cbind(d2, algorithm= rownames(d2)) %>% as.data.frame()
colnames(d2) <- c("n", "type", "algorithm")
d2$type=factor(d2$type,levels = c("sim_national","sim_us0.2","sim_us0.5","sim_au0.2","sim_au0.5"))
# d2$type=as.factor(d2$type)
# d2$type=ordered(d2$type,levels=c("sim_new","sim_ped","sim_original"))
#levels(d2$type)=c("sim_new","sim_ped","sim_original")
d2$n <- round(as.numeric(d2$n), digits = 4)
d2=d2[-2,]
g2 = d2 %>% ggplot(aes(x=algorithm, y= n, fill = type))+ geom_col(position = "dodge") + scale_y_continuous(breaks = c(seq(0,1,0.1))) + labs( title = "Weighted sampling") +
theme_bw() +
scale_fill_tableau()
g2 #saved as pdf
table(sim_national$algorithm)
final_ogl =Surv(tx_lperiod,tx_lstatus)~recip_eth_detailed+recip_age+recip_smoker+recip_pvd+recip_diabetes+recip_waittime+donor_age+donor_height+donor_hypertension+tx_misdr #those are the originla variables we used from Vashi's analysis
index =levels(rawdata$recip_eth_detailed) %in% c("Oceanian - Australian Aboriginal", "Oceanian - Torres Strait Islander")
levels(rawdata$recip_eth_detailed)[!index] = "Non-Indigenous"
rawdata[rawdata$tx_lperiod==0,"tx_lperiod"]=0.1
fit.coxph.ogl=coxph(final_ogl,data=rawdata,x=TRUE,y=TRUE)
##new data predition function
predictrisk  = function(newdata)
{
newdata$recip_waittime=newdata$recip_waittime_new
index =levels(newdata$recip_eth_detailed) %in% c("Oceanian - Australian Aboriginal", "Oceanian - Torres Strait Islander")
levels(newdata$recip_eth_detailed)[!index] = "Non-Indigenous"
##  levels(newdata$recip_eth)[index] = "Indigenous"  ## need to remember index changed here
DR1 = (newdata$recip_dr1 != newdata["donor_dr1"]) & (newdata$recip_dr1 !=newdata["donor_dr2"])
DR2 = (newdata$recip_dr2 != newdata["donor_dr1"]) & (newdata$recip_dr2 !=newdata["donor_dr2"])
newdata$tx_misdr = DR1 + DR2
newdata$recip_age=newdata$recip_age_new
#fit.coxph.ogl=coxph(final_ogl,data=rawdata)
riskd = predict(fit.coxph.ogl, newdata = newdata, type="risk")
return(riskd)
}
##new data predition function (10 yrs survival)
predictSurvProb  = function(newdata)
{
final_ogl =Surv(tx_lperiod,tx_lstatus)~recip_eth_detailed+recip_age+recip_smoker+recip_pvd+recip_diabetes+recip_waittime+donor_age+donor_height+donor_hypertension+tx_misdr #those are the originla variables we used from Vashi's analysis
index =levels(rawdata$recip_eth_detailed) %in% c("Oceanian - Australian Aboriginal", "Oceanian - Torres Strait Islander")
levels(rawdata$recip_eth_detailed)[!index] = "Non-Indigenous"
rawdata[rawdata$tx_lperiod==0,"tx_lperiod"]=0.1
fit.coxph.ogl=coxph(final_ogl,data=rawdata,x=TRUE,y=TRUE)
newdata$recip_waittime=newdata$recip_waittime_new
index =levels(newdata$recip_eth_detailed) %in% c("Oceanian - Australian Aboriginal", "Oceanian - Torres Strait Islander")
levels(newdata$recip_eth_detailed)[!index] = "Non-Indigenous"
DR1 = (newdata$recip_dr1 != newdata["donor_dr1"]) & (newdata$recip_dr1 !=newdata["donor_dr2"])
DR2 = (newdata$recip_dr2 != newdata["donor_dr1"]) & (newdata$recip_dr2 !=newdata["donor_dr2"])
newdata$tx_misdr = DR1 + DR2
newdata$recip_age=newdata$recip_age_new
#fit.coxph.ogl=coxph(final_ogl,data=rawdata)
riskd=pec::predictSurvProb(fit.coxph.ogl,newdata=newdata,times=365*5)
return(riskd)
}
sim_national$predictrisk=predictrisk(sim_national)
sim_national$predictsurvprob=predictSurvProb(sim_national)
sim_au0.2$predictrisk=predictrisk(sim_au0.2)
sim_au0.2$predictsurvprob=predictSurvProb(sim_au0.2)
sim_us0.2$predictrisk=predictrisk(sim_us0.2)
sim_us0.2$predictsurvprob=predictSurvProb(sim_us0.2)
sim_au0.5$predictrisk=predictrisk(sim_au0.5)
sim_au0.5$predictsurvprob=predictSurvProb(sim_au0.5)
sim_us0.5$predictrisk=predictrisk(sim_us0.5)
sim_us0.5$predictsurvprob=predictSurvProb(sim_us0.5)
a_overall <- rbind(sim_national, sim_us0.2,sim_us0.5,sim_au0.2,sim_au0.5)
dim(sim_national)
dim(sim_us0.2)
#try the national comparison only
sim_national=sim_national[sim_national$algorithm=="National",]
raw_donor_matrix$donor_rank = rank(raw_donor_matrix[,'donor_kdri']) / nrow(raw_donor_matrix)
# get the national only (without sdm)
fun=function(recip_dt){
result=runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool1.2,
matching_FUN = select_max,
#waitlist_FUN = NULL,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
waitlist_arg = list(waitlist_Risk = TRUE),
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE),
resampleN = 1,
verbose = FALSE,
num_donor = 800,
num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE)
return(result)}
simresult=list()
for(i in 1:10){simresult[[i]]=fun(recip_sample_list[[i]])}
saveRDS(simresult,"nationalfull.rds")
View(sim_au0.5)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE)
fun3=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool2.2,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.1),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
fun4=function(recip_dt){
return(runSimulation5.4(raw_recip_matrix_subset,
raw_donor_matrix,
algorithm_FUN = allocation_national,
eligible_FUN = selectionpool2.2,
matching_FUN = select_max,
state_algorithm = TRUE,
national_algorithm_threshold = 54000000,
state_algorithm_FUN = Australia_state_algorithm,
state_eligible_FUN = Australia_state_selectionpool,
state_matching_FUN = select_max,
eligible_arg = list(AB_priority = TRUE,threshold_number=0.3),
resampleN = 1,
verbose = FALSE,
num_donor = 800,num_recip = 300,
state_balance = TRUE,
dynamic_waitlist = FALSE,
National_II = TRUE ))
}
simresult3=list()
simresult4=list()
for(i in 1:10){simresult3[[i]]=fun3(recip_sample_list[[i]])}
for(i in 1:10){simresult4[[i]]=fun4(recip_sample_list[[i]])}
saveRDS(simresult3,"us0.1full.rds")
saveRDS(simresult4,"us0.3full.rds")
